var Goal = require('../model/Goal');
var Q = require('q');
var Moment = require('moment');
var GoalAchievement = require('../model/GoalAchievement');
var LogSearch = require('../search/search');
var extend = require('extend');

exports.achieve = function (params) {
    var date = params.date;
    var includeUpdate = params.includeUpdate === 'true';
    return Q.promise(function (resolve, reject) {
        if (!date) {
            return reject(new Error('need date params'));
        }
        date = new Moment(date).toDate();
        Goal.find(null, function (err, goals) {
            if (err) {
                return reject(err);
            }
            Q.all(
                goals.map(function (goal) {
                    var queryParams = extend({
                        start: new Moment(date).startOf('day').toDate(),
                        end: new Moment(date).endOf('day').toDate(),
                        sort: 'start:-1',
                        populate: false
                    }, JSON.parse(goal.filter));
                    return LogSearch.query(queryParams)
                            .then(function (result) {
                                var totalTime = result.reduce(function (sum, log) {
                                    return sum + log.len;
                                }, 0);
                                if (totalTime > 0) {
                                    var lastLog = result[0];//倒序，所以取第一个为最后完成的日志
                                    var dateInfo = toDate(goal.granularity);
                                    var estimatedTime = goal.estimatedTime;
                                    var oneDayTime = estimatedTime / dateInfo.diff;
                                    goal.__time = totalTime;
                                    goal.__achieveLog = lastLog;
                                    var progress = totalTime / oneDayTime * 100;
                                    goal.__progress = progress;
                                }
                                return goal;
                            });
                })
            ).then(function (goals) {
                var promises = [];
                goals.forEach(function (goal) {
                    var achieve = goal.__progress >= 100;
                    if (achieve) {
                        var promise =  Q.promise(function (resolve, reject) {
                            GoalAchievement.find({goalId: goal._id, date: date}, function (err, achieve) {
                                if (err) {
                                    return reject(err);
                                }
                                resolve({goal: goal, achieve: achieve[0]});
                            });
                        });
                        promises.push(promise);
                    }
                });
                return Q.all(promises);
            }).then(function (results) {
                return Q.all(results.map(function (result){
                    var goal = result.goal,
                        achieve = result.achieve,
                        achieveLog = goal.__achieveLog;
                    if (!achieve) {
                        console.log('create achieve');
                        achieve = new GoalAchievement({
                            goalId: goal._id,
                            achieveTime: new Moment(achieveLog.end).toDate(),
                            date: date,
                            progress: goal.__progress,
                            time: goal.__time
                        });
                    } else {
                        console.log('update achieve');
                        achieve.progress = goal.__progress;
                        achieve.time = goal.__time;
                        achieve.updateTime = new Date();
                    }
                    return Q.promise(function (resolve, reject) {
                        achieve.save(function (err, achieve) {
                            if (err) {
                                return reject(err);
                            }
                            achieve = achieve.toJSON();
                            achieve.goal = goal.toJSON();
                            return resolve(achieve);
                        });
                    });
                }));
            }).then(function(achievements) {
                if (includeUpdate) {
                    resolve(achievements);
                } else {
                    resolve(achievements.filter(function (achieve) {
                        return !achieve.updateTime;
                    }));
                }
            }).catch(function (err) {
                reject(err);
            });
        });
    });
};

function toDate(type) {
    var params = {};
    if (type === 'yesterday') {
        params.start = new Moment().subtract(1, 'day').startOf('day').toDate();
        params.end = new Moment().subtract(1, 'day').endOf('day').toDate();
    } else if (type === 'weekly' || type === 'week') {
        params.start = new Moment().startOf('week').toDate();
        params.end = new Moment().endOf('week').toDate();
    } else if ( type === 'today' || type === 'day') {
        params.start = new Moment().startOf('day').toDate();
        params.end = new Moment().endOf('day').toDate();
    } else if ( type === 'monthly' || type === 'month') {
        params.start = new Moment().startOf('month').toDate();
        params.end = new Moment().endOf('month').toDate();
    } else if ( type === 'last_seven_day' || type === 'last_seven_days' ||type === 'last_7_days') {
        params.start = new Moment().subtract(7, 'day').startOf('day').toDate();
        params.end = new Moment().endOf('day').toDate();
    } else if ( type === 'last_three_day' || type === 'last_three_days' || type === 'last_3_days') {
        params.start = new Moment().subtract(3, 'day').startOf('day').toDate();
        params.end = new Moment().endOf('day').toDate();
    } else if ( type === 'last_fifteen_day' || type === 'last_fifteen_days' || type === 'last_15_days') {
        params.start = new Moment().subtract(15, 'day').startOf('day').toDate();
        params.end = new Moment().endOf('day').toDate();
    } else if (type === 'last_month') {
        params.start = new Moment().subtract(1, 'month').startOf('day').toDate();
        params.end = new Moment().endOf('day').toDate();
    }
    params.diff = Moment(params.end).diff(params.start, 'day') + 1;
    return params;
}