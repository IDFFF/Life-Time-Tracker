
/**
 * stat module
 */
'use strict';

var Q = require('q');
var Search = require('../../search/search');
var statist = require('../../statist');
var helper = require('../../helper');
var _ = require('lodash');
var Moment = require('moment');
var Stat = require('../../model/Stat');
var MultipleStat = require('../../statists/multipleDays');


function readStatResultFromDataBase(options) {
    var deferred = Q.defer();
    var mStart = new Moment(options.start);
    var mEnd = new Moment(options.end);
    var conditions = {
        date: {
            $lte: mEnd.toDate(),
            $gte: mStart.toDate()
        }
    };
    Stat.find(conditions, options.fields || null, function (err, stats) {
        if (err) {
            return deferred.reject(err);
        }
        deferred.resolve(stats);
    });
    return deferred.promise;
}


exports.generate = function (options) {
    var deferred = Q.defer();
    var mStart = new Moment(options.start);
    var mEnd = new Moment(options.end);
    var isSingleDay = mStart.diff(mEnd, 'day') === 0;
    readStatResultFromDataBase(options).then(function (stats) {
        var result = {};
        var days = stats.map(function (stat) {
            return stat.result;
        });
        if (isSingleDay) {
            console.log('single day query');
            if (!_.isEmpty(days)) {
                result = days[0];
            }
        } else {
            console.log('multiple day query');
            result = MultipleStat.dispose(options, days);
            result.days = _.sortBy(days, function (day) { return day.date; });
        }
        deferred.resolve(result);
    }).catch(function (err) {
        deferred.reject(err);
    });
    return deferred.promise;
};


exports.generateOld = function (options) {
    var deferred = Q.defer();
    Search.query(options)
        .then(function (queryResult) {
            var days = helper.megerLogsToDateType(queryResult, 'day');
            var result = statist.dispose(options, {
                days: days
            });
            result.days = _.sortBy(result.days, function (day) {
                return day.date;
            });
            deferred.resolve(result);
        }).catch(function (err) {
            deferred.reject(err);
        });
    return deferred.promise;
};