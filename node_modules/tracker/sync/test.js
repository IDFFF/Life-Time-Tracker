'use strict';
var Evernote = require('evernote').Evernote;
var Msg = require('../message');
// entity type encoder


var EVERNOTE_SERVER_ERROR = '同步evernote服务器发生故障';
var authToken  = require('../conf/token.json').evernote;


var client = new Evernote.Client({
    token: authToken,
    sandbox: false
});

var userStore = client.getUserStore();

userStore.checkVersion(
    "Evernote EDAMTest (Node.js)",
    Evernote.EDAM_VERSION_MAJOR,
    Evernote.EDAM_VERSION_MINOR,
    function(err, versionOk) {
        if (err) {
            Msg.error(EVERNOTE_SERVER_ERROR, err);
            return;
        }
        Msg.info("Is my Evernote API version up to date? " + versionOk);
        if (!versionOk) {
            process.exit(1);
        }
        var noteStore = client.getNoteStore();
        noteStore.listNotebooks(function(err, notebooks) {
            if (err) {
                Msg.error(EVERNOTE_SERVER_ERROR + ' 访问限制', err);
                return;
            }
            notebooks.forEach(function(notebook) {
                if (notebook.name === 'Diary') {
                    console.log('notebook exsit guid = ' + notebook.guid);
                    downloadNote(notebook, '变懒了');
                }
            });
        });

        function downloadNote(notebook,noteTitle) {
            var filter = new Evernote.NoteFilter(),
                spec = new Evernote.NotesMetadataResultSpec();
            spec.includeTitle = true;
            spec.includeCreated = true;
            spec.includeUpdated = true;
            filter.notebookGuid = notebook.guid;
            noteStore.findNotesMetadata(filter, 0, 35600, spec, function(err, result) {
                if (err) {
                    Msg.error(EVERNOTE_SERVER_ERROR, err);
                    throw err;
                }

                var notes = result.notes;
                var downloadNotes = notes.filter(function(note) {
                    return note.title === noteTitle;
                });
                //result.totalNotes
                if (downloadNotes.length > 0) {
                    console.log('一共找到' + downloadNotes.length + '个笔记符合同步条件.');
                } else {
                    console.log('没有找到符合条件的笔记.');
                }
                var downloadFailNotes = [],
                    downloadSuccessNotes = [],
                    loadedCount = 0;
                downloadNotes.forEach(function(note) {
                    noteStore.getNote(authToken, note.guid, true, false, false, false, function(err, result) {
                        if (err) {
                            downloadFailNotes.push(note);
                            Msg.error('下载日志失败' + note, err);
                            return;
                        }
                        var noteTitle = note.title;
                        downloadSuccessNotes.push(noteTitle);
                        console.log(result);
                        loadedCount++;
                    });
                });
            });
        }
    }
);


