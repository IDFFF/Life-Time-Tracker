var Util = require('./util');
var Moment = require('moment');
var Q = require('q');
var TrackerHelper = require('./helper');
var _ = require('lodash');
var extend = require('extend');

exports.check = function (start, end) {
    var deferred = Q.defer();
    start = new Moment(start);
    end = new Moment(end);
    var days = end.diff(start, 'day');
    var date;
    var promise = Q(1);
    var checkResult = [];
    while (days >= 0) {
        date = start.format('YYYY-MM-DD');
        promise = promise.then(readFile.bind(null, date)).then(check);
        start.add(1, 'day');
        days--;
    }
    function readFile(date) {
        return Util.readLogFileByDate(date);
    }
    function check(result) {
        var fileContent = result.fileContent;
        if (fileContent) {
            var res = checkLogContent(result.date, fileContent);
            if (!_.isEmpty(res.warns) || !_.isEmpty(res.errors)) {
                checkResult.push(
                    extend(
                        {date: result.date},
                        _.pick(res, ['warns', 'errors'])
                    )
                );
            }
        }
    }
    promise.then(function () {
        console.log('done');
        deferred.resolve(checkResult);
    }).catch(function (err) {
        deferred.reject(err);
    });
    return deferred.promise;
};

function checkLogContent(date, content) {
    var includeErrorInfo = true;
    var includeLogWithoutTime = false;
    var result = TrackerHelper.getLogs(content, date, includeLogWithoutTime, includeErrorInfo);
    var logSequenceError = TrackerHelper.getLogSequenceError(result.logs);
    result.errors = result.errors.concat(logSequenceError);
    return result;
}