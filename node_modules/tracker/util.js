'use strict';

var path = require('path'),
    moment = require('moment'),
    extend = require('extend');
//const

function isValidDate(date) {
    if (Object.prototype.toString.call(date) === '[object Date]') {
        return !isNaN(date.getTime());
    } else {
        return false;
    }
}


function getDayNumInMonth (year, month) {
    return new Date(year, month, 0).getDate();
}


function isDayValid(y, m, d) {
    //the day number of one month
    var dayNum = getDayNumInMonth(y, m);
    return d <= dayNum && d > 0;
}

var dateFormat = 'YYYY-MM-DD HH:mm',
    timeFormat = 'HH:mm';
function formatDate (date) {
    return format(date, dateFormat);
}

function format (date, formatStr) {
    var m;
    if (typeof date === 'string') {
        m = new moment(date, dateFormat);
    } else {
        m = new moment(date);
    }
    return m.format(formatStr);
}

function formatTime (time) {
    return format(time, timeFormat);
}

function mean(days, prop) {
    var total = days.length;
    var sum = days.reduce(function (sum, value) {
        return sum += value[prop];
    }, 0);
    return sum/total;
}


function frequence(data, filter, creator) {
    return data.reduce(function (result, d){
        var target = result.filter(filter.bind(null, d));
        if (target && target.length > 0) {
            target[0].frequence++;
        } else {
            if (creator) {
                d = creator(d);
            }
            d = extend({frequence: 1}, d);
            result.push(d);
        }
        return result;
    }, []);
}

function inversObj(obj) {
    var result = {};
    Object.keys(obj).forEach(function (key) {
        result[obj[key]] = key;
    });
    return result;
}


function resolvePath(p) {
    return path.resolve(__dirname, p);
}







module.exports = {
    isValidDate: isValidDate,
    resolvePath: resolvePath,
    getDayNumInMonth: getDayNumInMonth,
    isDayValid: isDayValid,
    formatTime: formatTime,
    formatDate: formatDate,
    timeFormat: timeFormat,
    dateFormat: dateFormat,
    frequence: frequence,
    inversObj: inversObj,
    mean: mean
};
