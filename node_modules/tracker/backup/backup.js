/**
 * back up logs, make sure the data savety
 * have different Storage location(remote and local)
 *   - local disk
 *   - remote
 *     + evernote
 *     + dropbox (todo)
 */
'use strict';

var evernote = require('../sync/evernote');
var _ = require('lodash');
var extend = require('node.extend');
var Q = require('q');
var exporter = require('../exporter');
var Msg = require('../message');


var backUp = {
    evernote: function (days) {
        return evernote.backUp(days);
    }
};


/**
 * backup
 * @param  {Object} options
 */
exports.backUp = function (options) {
    var deferred = Q.defer();
    extend(true, {
        locations: ['local', 'evernote']
    }, options);

    exporter.export(options).then(function (days) {
        var backUpLocations = options.locations;
        //back up data to all storage location
        Q.allSettled(backUpLocations.map(function (location) {
            var backUpHandler = backUp[location];
            if (_.isFunction(backUpHandler)) {
                backUpHandler.call(null, days);
            } else {
                Msg.warn('Do not have back up location ' + location);
            }
        })).then(function (promises) {
            promises.forEach(function (promise) {
                var location = promise.value.location;
                if (promise.state === 'fulfilled') {
                    Msg.success('Successfully back up to ' + location);
                } else {
                    Msg.error('Fail back up to ' + location);
                }
            });
        });
    });
    return deferred.promise;
};