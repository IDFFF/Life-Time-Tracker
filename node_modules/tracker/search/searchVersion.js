var Q = require('q');
var _ = require('lodash');
var Moment = require('moment');
var ObjectId = require('mongoose').Types.ObjectId;
var extend = require('extend');
//models
var Version = require('../model/version');



exports.query = function (options) {
    options = extend({}, options);
    if (options.id) {
        return queryVersionById(options);
    } else {
        return queryVersionsByConditions(options);
    }
};


function queryVersionsByConditions(options) {
    var deferred = Q.defer();
    var conditions = getQueryConditions(options);
    var queryOptions = getQueryOptions(options);
    var query = Version.find(conditions, null, queryOptions);
    query.exec(function (err, versions) {
        if (err) {
            deferred.reject(err);
            return;
        }
        if (_.isEmpty(versions)) {
            deferred.resolve([]);
            return;
        }
        deferred.resolve(versions);
    });

    return deferred.promise;
}

function queryVersionById(id) {

}


function getQueryConditions(options) {
    var conditions = [],
        timeCondition;
    if (options.start && options.end) {
        timeCondition.push({
            createTime: {
                $gt: new Moment(options.start).startOf('day').toDate(),
                $lt: new Moment(options.end).endOf('day').toDate()
            }
        });

        timeCondition.push({
            lastActiveTime: {
                $gt: new Moment(options.start).startOf('day').toDate(),
                $lt: new Moment(options.end).endOf('day').toDate()
            }
        });

        timeCondition.push({
            $and: [{
                lastActiveTime: { $gte: new Moment(options.end).endOf('day').toDate() }
            }, {
                createTime: {$lte: new Moment(options.start).startOf('day').toDate() }
            }]
        });
    }
    if (options.projectId) {
        conditions.push({
            projectId: new ObjectId(options.projectId)
        });
    }

    if (timeCondition) {
        conditions.push(timeCondition);
    }

    if (!_.isEmpty(conditions)) {
        return {
            $and: conditions
        };
    }
    return null;
}

function getQueryOptions(userOptions) {
    var queryOptions = _.pick(userOptions, ['limit', 'skip']);
    //默认按照最后活动时间倒序排列
    queryOptions.sort = {createTime: -1};
    return queryOptions;
}
