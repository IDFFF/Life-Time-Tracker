//connect to database
var db = require('../model/db');
db.connect();


var Moment = require('moment');
var Q = require('q');
var _ = require('lodash');

/** Models */
var Log = require('../model/log.js');
var Project = require('../model/project');
var Version = require('../model/version');
var Task = require('../model/Task');

var NOT_EMPTY = function (a) {return !!a};

/*exports.find = function (options) {
    var deferred = Q.defer();
    if (!options.start || !options.end) {
        return deferred.reject({
            message: 'need start and end params'
        });
    }
    /*Project.find({
        lastActiveTime: {
            $gte: new Moment(options.start).toDate(),
            $lte: new Moment(options.end).toDate()
        }
    }).exec(function (err, projects) {
        if (err) {
            return deferred.reject(err);
        }
        Q.allSettled(projects.map(function (project) {
            var calOptions = _.pick(options, ['start', 'end', 'top']);
            calOptions.project = project;
            return countTimes(calOptions);
        })).then(function (results) {
            console.log(results);
        });
    });

    return deferred.promise;
};*/



function countTimes(options) {
    var deferred = Q.defer();
    Log.aggregate([
        {
            $match: {
                date: {
                    $gte: new Moment(options.start).toDate(),
                    $lte: new Moment(options.end).toDate()
                }
            }
        },
        (options.group === 'classes' ? {$unwind: "$classes"} : null),
        (options.group === 'tags' ? {$unwind: "$tags"} : null),
        {
            $group: {
                _id: '$' + options.group,
                totalTime: {$sum: "$len"},
                count: {$sum: 1}
            }
        },
        {
            $sort : {totalTime: -1, count: -1 }
        }
    ].filter(NOT_EMPTY)).exec(function (err, results) {
        if (err) {
            return deferred.reject(err);
        }
        results = results.filter(function (item) {
            return !!item._id;
        });
        if (options.group === 'project') {
            Project.populate(results, {path: "_id"}, onPopulate);
        } else if (options.group === 'task') {
            Task.populate(results, {path: "_id"}, onPopulate);
        } else if (options.group === 'version') {
            Version.populate(results, {path: "_id"}, onPopulate);
        }else {
            if (_.isNumber(options.top)) {
                results = results.slice(0, options.top);
            }
            deferred.resolve(results);
        }
    });

    function onPopulate (err, results) {
        if (err) {
            return deferred.reject(err);
        }
        if (_.isNumber(options.top)) {
            results = results.slice(0, options.top);
        }
        deferred.resolve(results);
    }
    return deferred.promise;
}

var start = process.argv[2];
var end = process.argv[3];
var type = process.argv[4];
var diff = new Moment(end).diff(start, 'days');
console.log('时间跨度:' + diff + ' 天');
countTimes({
    start: start,
    end: end,
    group: type
}).then(function (result) {
    result.forEach(function (item) {
        if (item.count >= (diff * 0.55)) {
            console.log(item._id.name || item._id, item.totalTime, item.count, '****');
        } else {
            console.log(item._id.name || item._id, item.totalTime, item.count);
        }
    });
}).catch(function (err) {
    console.log(err.stack);
    throw err;
});