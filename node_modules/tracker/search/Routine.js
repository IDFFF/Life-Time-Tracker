var Moment = require('moment');
var Q = require('q');
var _ = require('lodash');

/** Models */
var Log = require('../model/log.js');
var Project = require('../model/project');
var Version = require('../model/version');
var Task = require('../model/Task');

var NOT_EMPTY = function (a) {return !!a};

exports.find = function (options) {
    var deferred = Q.defer();
    if (!options.start || !options.end) {
        deferred.reject({
            message: 'need start and end params'
        });
    } else {
        var start = new Moment(options.start).toDate();
        var end = Moment(options.end).toDate();
        var groups = ['project', 'classes', 'tags', 'task', 'version'];
        var diff = new Moment(end).diff(start, 'days');
        console.log('时间跨度:' + diff + ' 天');
        Q.allSettled(groups.map(function (group) {
            return countTimes({
                start: start,
                end: end,
                group: group
            }).then(function (result) {
                return {
                    type: group,
                    data: result.filter(function (item) {
                        return item.count >= (diff * 0.55);
                    })
                };
            }).catch(function (err) {
                console.log(err.stack);
                throw err;
            });
        })).then(function (results) {
            var data = {};
            results.forEach(function (result) {
                if (result.state ==='fulfilled') {
                    var value = result.value;
                    data[value.type] = value.data;
                }
            });
            deferred.resolve(data);
        }).catch(function (err) {
            console.log(err.message, err.stack);
            deferred.reject(err);
        });
    }
    return deferred.promise;
};




function countTimes(options) {
    var deferred = Q.defer();
    Log.aggregate([
        {
            $match: {
                date: {
                    $gte: new Moment(options.start).toDate(),
                    $lte: new Moment(options.end).toDate()
                }
            }
        },
        (options.group === 'classes' ? {$unwind: "$classes"} : null),
        (options.group === 'tags' ? {$unwind: "$tags"} : null),
        {
            $group: {
                _id: '$' + options.group,
                totalTime: {$sum: "$len"},
                count: {$sum: 1}
            }
        },
        {
            $sort : {totalTime: -1, count: -1 }
        }
    ].filter(NOT_EMPTY)).exec(function (err, results) {
        if (err) {
            return deferred.reject(err);
        }
        results = results.filter(function (item) {
            return !!item._id;
        });
        if (options.group === 'project') {
            Project.populate(results, {path: "_id"}, onPopulate);
        } else if (options.group === 'task') {
            Task.populate(results, {path: "_id"}, onPopulate);
        } else if (options.group === 'version') {
            Version.populate(results, {path: "_id"}, onPopulate);
        }else {
            if (_.isNumber(options.top)) {
                results = results.slice(0, options.top);
            }
            deferred.resolve(results);
        }
    });

    function onPopulate (err, results) {
        if (err) {
            return deferred.reject(err);
        }
        if (_.isNumber(options.top)) {
            results = results.slice(0, options.top);
        }
        deferred.resolve(results);
    }
    return deferred.promise;
}