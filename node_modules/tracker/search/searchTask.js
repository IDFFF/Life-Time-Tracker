var Q = require('q');
var _ = require('lodash');
var Moment = require('moment');
var Msg = require('../message');
var ObjectId = require('mongoose').Types.ObjectId;

//models
var Task = require('../model/Task');
var Log = require('../model/log');


exports.query = function (options) {
    options = _.extend({ populate: true }, options);
    if (options.id) {
        return queryTaskById(options);
    } else {
        return queryTasksByConditions(options);
    }
};


function queryTasksByConditions(options) {
    var deferred = Q.defer();
    var conditions = getQueryConditions(options);
    var queryOptions = getQueryOptions(options);
    var query = Task.find(conditions, null, queryOptions);
    if (options.populate) {
        query = query.populate([{
            path: 'children'
        }]);
    }
    var taskStatus = options.status;

    query.exec(function (err, tasks) {
        if (err) {
            return deferred.reject(err);
        }
        if (_.isEmpty(tasks)) {
            return deferred.resolve([]);
        }
        tasks.forEach(function (tasks) {
            tasks.children.filter(function (task) {
                if (taskStatus === 'doing') {
                    return task.progress > 0 && task.progress < 100;
                } else if (taskStatus === 'done') {
                    return task.progress === 100;
                } else {
                    return true;
                }
            }).sort(function (a, b) {
                return new Date(b.lastActiveTime).getTime() - new Date(a.lastActiveTime).getTime();
            });
        });
        //calculate total time consume for each task
        if (options.calculateTimeConsume) {
            Q.allSettled(tasks.map(calculateTaskTimeConsume)).then(function () {
                deferred.resolve(tasks);
            });
        } else {
            deferred.resolve(tasks);
        }

        function calculateTaskTimeConsume(task) {
            var deferred = Q.defer();
            Log.aggregate()
                .match({task: new ObjectId(task._id)})
                .group({_id: '$task', totalTime: {$sum: "$len"}})
                .exec()
                .then(function (result) {
                    var calculteResult = result[0],
                        totalTime = 0;
                    if (!calculteResult) {
                        totalTime = 0;
                    } else {
                        totalTime = calculteResult.totalTime;
                    }
                    //if have children, then calculate the children's time consume
                    if (task.children.length > 0) {
                        Q.allSettled(task.children.map(calculateTaskTimeConsume)).then(function (results) {
                            totalTime = results.reduce(function (totalTime, result) {
                                if (result.state === "fulfilled") {
                                    totalTime += result.value;
                                }
                                return totalTime;
                            }, totalTime);
                            task.setValue('totalTime', totalTime);
                            deferred.resolve();
                        });
                    } else {
                        task.setValue('totalTime', totalTime);
                        deferred.resolve(totalTime);
                    }
                }).on('reject', function (err) {
                    deferred.reject(err);
                });
            return deferred.promise;
        }
    });

    return deferred.promise;
}

function queryTaskById(id) {

}


function getQueryConditions(options) {
    var conditions = [{parent: { $type: 10 }}],
        timeCondition;
    if (options.start && options.end) {
        timeCondition.push({
            createdTime: {
                $gt: new Moment(options.start).startOf('day').toDate(),
                $lt: new Moment(options.end).endOf('day').toDate()
            }
        });

        timeCondition.push({
            lastActiveTime: {
                $gt: new Moment(options.start).startOf('day').toDate(),
                $lt: new Moment(options.end).endOf('day').toDate()
            }
        });

        timeCondition.push({
            $and: [{
                lastActiveTime: { $gte: new Moment(options.end).endOf('day').toDate() }
            }, {
                createdTime: {$lte: new Moment(options.start).startOf('day').toDate() }
            }]
        });
    }
    var taskStatus = options.status;
    if (taskStatus === 'doing') {
        conditions.push({
            progress: {$gt: 0, $lt: 100}
        });
    } else if (taskStatus === 'done'){
        conditions.push({
            progress: 100
        });
    }
    if (options.projectId) {
        conditions.push({
            projectId: new ObjectId(options.projectId)
        });
    }

    if (options.versionId) {
        conditions.push({
            versionId: new ObjectId(options.versionId)
        });
    }

    if (options.name) {
        conditions.push({
            name: options.name
        });
    }

    if (timeCondition) {
        conditions.push(timeCondition);
    }

    if (!_.isEmpty(conditions)) {
        return {
            $and: conditions
        };
    }
    return null;
}

function getQueryOptions(userOptions) {
    var queryOptions = _.pick(userOptions, ['limit', 'skip']);
    //默认按照最后活动时间倒序排列
    queryOptions.sort = {lastActiveTime: -1};
    return queryOptions;
}
