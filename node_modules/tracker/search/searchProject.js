var Q = require('q');
var Project = require('../model/project');
var _ = require('lodash');
var Moment = require('moment');

exports.query = function(options) {
    var deferred = Q.defer();
    queryProjects(options, function(result) {
        deferred.resolve(result.map(function(item) {
            return item.toJSON();
        }));
    }, function(err) {
        deferred.reject(err);
    });
    return deferred.promise;
};


function queryProjects(options, onSuccess, onError) {
    var conditions = getQueryConditions(options);
    var queryOptions = getQueryOptions(options);
    var args = [conditions, options.fields || null, queryOptions];
    Project.find.apply(Project, args).exec(function (err, projects) {
        if (err) {
            onError(err);
            return;
        }
        onSuccess(projects);
    });
}

function getQueryConditions(options) {
    var conditions = [];
    if (options.start && options.end) {
        conditions.push({
            createdTime: {
                $gt: new Moment(options.start).startOf('day').toDate(),
                $lt: new Moment(options.end).endOf('day').toDate()
            }
        });

        conditions.push({
            lastActiveTime: {
                $gt: new Moment(options.start).startOf('day').toDate(),
                $lt: new Moment(options.end).endOf('day').toDate()
            }
        });

        conditions.push({
            $and: [{
                lastActiveTime: { $gte: new Moment(options.end).endOf('day').toDate() }
            }, {
                createdTime: {$lte: new Moment(options.start).startOf('day').toDate() }
            }]
        });
    }
    if (!_.isEmpty(conditions)) {
        return {
            $or: conditions
        };
    }
    return null;
}

function getQueryOptions(userOptions) {
    var queryOptions = _.pick(userOptions, ['limit', 'skip']);
    //默认按照最后活动时间倒序排列
    queryOptions.sort = {lastActiveTime: -1};
    return queryOptions;
}