var Q = require('q');
var _ = require('lodash');
var Moment = require('moment');
var Msg = require('../message');
var ObjectId = require('mongoose').Types.ObjectId;

//models
var Project = require('../model/project');
var Task = require('../model/task');
var Log = require('../model/log');
var Version = require('../model/version');

exports.query = function (options) {
    if (options.id) {
        return queryProjectById(options);
    } else {
        return queryProjects(options);
    }
};

function queryProjects(options) {
    var deferred = Q.defer();
    queryProjectsByCondition(options, function(projects) {
        deferred.resolve(projects.map(function(project) {
            var obj = project.toJSON();
            if (project.lastTasks) {
                obj.lastTasks = project.lastTasks.map(function (task) {
                    return task.toJSON();
                });
            }
            if (project.versions) {
                obj.versions = project.versions.map(function (version) {
                    return version.toJSON();
                });
            }
            obj.taskCount = project.taskCount;
            obj.totalTime = project.totalTime;
            return obj;
        }));
    }, function(err) {
        deferred.reject(err);
    });
    return deferred.promise;
}

function queryProjectById(options) {
    var deferred = Q.defer();
    if (!options.id) {
        deferred.resolve([]);
    }
    Project.findOne({_id: options.id}, function(err, project) {
        if (err) {
            deferred.reject(err);
            return;
        }
        if (_.isEmpty(project)) {
            deferred.resolve(null);
            return;
        }
        aggregateProject(project, function (project) {
            var obj = project.toJSON();
            if (project.lastTasks) {
                obj.lastTasks = project.lastTasks.map(function (task) {
                    return task.toJSON();
                });
            }
            if (project.versions) {
                obj.versions = project.versions.map(function (version) {
                    return version.toJSON();
                });
            }
            obj.taskCount = project.taskCount;
            obj.totalTime = project.totalTime;
            deferred.resolve(obj);
        });
    });
    return deferred.promise;
}


function queryProjectsByCondition(options, onSuccess, onError) {
    var conditions = getQueryConditions(options);
    var queryOptions = getQueryOptions(options);
    var args = [conditions, options.fields || null, queryOptions];
    Project.find.apply(Project, args).exec(function (err, projects) {
        if (err) {
            onError(err);
            return;
        }
        //append more info to each project
        var lastIndex = projects.length - 1;
        projects.forEach(function (project, index) {
            aggregateProject(project, function () {
                if (index === lastIndex) {
                    return onSuccess(projects);
                }
            });
        });
    });
}


function aggregateProject(project, callback) {
    var projectId = project.id;
    Log.aggregate()
        .match({project: new ObjectId(projectId)})
        .group({_id: '$project', totalTime: {$sum: "$len"}})
        .exec()
        .then(function (result) {
            var sumData = result[0];
            project.totalTime = sumData.totalTime;
        })
        .then(function () {
            Task.count({projectId: projectId}, function (err, count) {
                if (err) {
                    Msg.error('failed to search task count', err);
                    return;
                }
                project.taskCount = count;
                Task.find({projectId: projectId})
                    .sort({lastActiveTime: -1})
                    .limit(2)
                    .exec()
                    .then(function (lastTasks) {
                        project.lastTasks = lastTasks;
                        return Version.find({projectId: new ObjectId(projectId)})
                            .sort({createdTime: -1, lastActiveTime: -1}).exec();
                    }).then(function (versions) {
                        project.versions = versions;
                        callback(project);
                    }).on('reject', function (err) {
                        Msg.error('failed when aggreate project', err);
                        return;
                    });
            });
        });
}

function getQueryConditions(options) {
    var conditions = [];
    if (options.start && options.end) {
        conditions.push({
            createdTime: {
                $gt: new Moment(options.start).startOf('day').toDate(),
                $lt: new Moment(options.end).endOf('day').toDate()
            }
        });

        conditions.push({
            lastActiveTime: {
                $gt: new Moment(options.start).startOf('day').toDate(),
                $lt: new Moment(options.end).endOf('day').toDate()
            }
        });

        conditions.push({
            $and: [{
                lastActiveTime: { $gte: new Moment(options.end).endOf('day').toDate() }
            }, {
                createdTime: {$lte: new Moment(options.start).startOf('day').toDate() }
            }]
        });
    }

    if (!_.isEmpty(conditions)) {
        return {
            $or: conditions
        };
    }
    return null;
}

function getQueryOptions(userOptions) {
    var queryOptions = _.pick(userOptions, ['limit', 'skip']);
    //默认按照最后活动时间倒序排列
    queryOptions.sort = {lastActiveTime: -1};
    return queryOptions;
}