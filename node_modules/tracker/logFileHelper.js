'use strict';

var fs = require('fs'),
    path = require('path'),
    moment = require('moment');
var Msg = require('./message');
var Q = require('q');
var mkdirp = require('mkdirp');
var ext = 'md';
var config = require('./conf/config');


function readLogFiles(date) {
    var logDir = config.get('logDir');
    var start = new Date().getTime();
    date = new moment(date).format('YYYY-MM-DD');
    var dateArr = parseDate(date);
    var fileName = dateArr.join('/') + '.' + ext;
    var deferred = Q.defer(),
        filePath = path.resolve(__dirname, [logDir, fileName].join('/'));
    fs.readFile(filePath, 'utf8', function (err, data) {
        if (err) {
            if (err.code === 'ENOENT') {
                deferred.resolve({
                    date: date,
                    fileContent: ''
                });
            } else {
                return deferred.reject({
                    err: err,
                    message: date + '\'s log file is not exist',
                    date: date
                });
            }
        }
        if (!data) {
            Msg.warn(date + '\'s log file ' + filePath +' is exist, but the content is empty');
        }
        console.log('read log file cost:' + (new Date().getTime() - start));
        deferred.resolve({
            fileContent: data,
            date: date
        });
    });

    return deferred.promise;
}

function parseDate(date) {
    return date.split('-').map(function (val) {
        return parseInt(val, 10);
    });
}

function writeLogFile(date, content) {
    var deferred = Q.defer();
    var dateArr = date.split('-').map(function(val) {
        return parseInt(val);
    });
    var logsPath = getLogSavePath();
    var path = logsPath + dateArr.slice(0, 2).join('/');
    //mkdir is the directory is not exist;
    mkdirp(path, function(err) {
        if (err) {
            deferred.reject(err);
            return;
        }
        var file = path + '/' + dateArr[2] + '.' + ext;
        fs.writeFile(file, content, function(err) {
            if (err) {
                Msg.error('写文件' + file + '错误', err);
                deferred.reject(err);
            }
            deferred.resolve(0);
        });
    });
    return deferred.promise;
}

function getLogSavePath() {
    var logDir = config.get('logDir');
    console.log('path:' + logDir);
    logDir = path.normalize(logDir);
    if (logDir.lastIndexOf('/') === logDir.length - 1) {
        logDir = logDir.slice(0, logDir.length - 1);
    }
    var resolvedPath = path.resolve(logDir);
    var isAbsolutePath = resolvedPath === logDir;
    var logsPath;
    if (isAbsolutePath) {
        logsPath = logDir + '/';
    } else {
        logsPath = path.resolve(__dirname, '../' + logDir) + '/';
    }
    return logsPath;
}

function readFile(filePath, encode) {
    var deferred = Q.defer();
    filePath = path.resolve(__dirname, filePath);
    fs.readFile(filePath, encode || 'utf8', function (err, data) {
        if (err) {
            return deferred.reject(err, filePath);
        }
        deferred.resolve(data);
    });
    return deferred.promise;
}

function readFileSync(filePath, encode) {
    filePath = path.resolve(__dirname, filePath);
    return fs.readFileSync(filePath, encode || 'utf8');
}

function readLogFilesSync(date) {
    var logDir = config.get('logDir');
    var dateArr = parseDate(date);
    var fileName = dateArr.join('/') + '.' + ext,
        filePath = path.resolve(__dirname, [logDir, fileName].join('/'));
    var fileData = fs.readFileSync(filePath, 'utf8');
    return {
        data: fileData,
        date: dateArr.join('-')
    };
}


module.exports = {
    readFile: readFile,
    readFileSync: readFileSync,
    readLogFiles: readLogFiles,
    readLogFilesSync: readLogFilesSync,
    writeLogFile: writeLogFile,
    readLogFileByDate: readLogFiles
};