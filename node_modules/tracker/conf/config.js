'use strict';
var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var isBrowser = false;
if (!global.process) {
    isBrowser = true;
}

var sysConfig = {
    "defaultPerspectives": ["sport", "sit", "category", "mean"],
    "message": {
        "level": []
    },
    "reminders": {
        "plan": {
            "ahead": 10,
            "interval": 6,
            "aheadOfDone": 5
        },
        "drinkWater": {
            "logPath": "../logs/drankWater.log",
            "cupsOfOneDay": 8,
            "interval": 2400000
        }
    },
    "sync": {
        "evernote": {
            "interval": 3600000,
            "auto": true
        }
    }
};
var prevSettings = null;
var settings = getSettings();

function getSettings() {
    if (isBrowser || !path.resolve || !fs.readFileSync) { return sysConfig; }
    var defaultSettingFilePath = path.resolve(__dirname, './defaultSettings.json');
    var userSettingFilePath = path.resolve(__dirname, './userSettings.json');
    var defaultSettings, userSettings;
    if (fs.existsSync(defaultSettingFilePath)) {
        var defaultSettingsFileContent =  fs.readFileSync(defaultSettingFilePath,  'utf8');
        try {
            defaultSettings = JSON.parse(defaultSettingsFileContent);
        } catch (e) {
            console.log('read defaultSettings failed');
        }
    }
    if (fs.existsSync(userSettingFilePath)) {
        var userSettingsFileContent = fs.readFileSync(userSettingFilePath, 'utf8');
        try {
            userSettings = JSON.parse(userSettingsFileContent);
        }catch (e) {
            console.log(e);
            console.log('read userSettings failed');
        }
    }

    return _.extend({}, sysConfig, defaultSettings, userSettings);
}

exports.update = function () {
    prevSettings = settings;
    settings = getSettings();
    console.log('settings update');
};

exports.get = function (key) {
    return key ? settings[key] : settings;
};

exports.isChanged = function (key) {
    if (prevSettings) {
        return prevSettings[key] !== settings[key];
    }
    return false;
}