'use strict';
require('tracker/ltt');
var _ = require('lodash');
var Moment = require('moment');
var evernoteSync = require('tracker/sync/evernote');
var importer = require('tracker/importer');
var searchProject = require('tracker/search/searchProject');
var searchVersion = require('tracker/search/searchVersion');
var searchTask = require('tracker/search/searchTask');
var searchTag = require('tracker/search/searchTag');
var helper = require('tracker/helper');
var _ = require('lodash');
var Q = require('q');
var notifier = require('node-notifier');



function syncNote(config) {
    if (config.type === 'evernote') {
        return evernoteSync.sync({
            start: config.start,
            end: config.end
        });
    }
}

exports.trackerHelper = helper;

exports.syncEvernote = function (start, end) {
    var mStart, mEnd;
    if (start && end) {
        mStart = new Moment(start);
        mEnd = new Moment(end);
    } else {
        mStart = new Moment().startOf('month');
        mEnd = new Moment().endOf('month');
    }
    start = mStart.toDate();
    end = mEnd.toDate();
    return syncNote({
        type: 'evernote',
        start: start,
        end: end
    }).then(function () {
        return importer.importFromLogFile({
            start: start,
            end: end
        });
    });
};


exports.projects = function (options) {
    return searchProject.query(options);
};


exports.versions = function (options) {
    return searchVersion.query(options);
};


exports.tasks = function (options) {
    return searchTask.query(options);
};

exports.tags = function (options) {
    return searchTag.query(options);
};

exports.importLogContent = function (date, logContent) {
    console.log('import logcontent');
    var start = new Date().getTime();
    var promise = importer.importLogContent(date, logContent);
    var end = new Date().getTime();
    var time = end - start;
    console.error('Execution time: ' + time);
    return promise;
};


exports.backUpLogFile = function (date, logContent) {
    return evernoteSync.backUpLogFile(date, logContent);
};


exports.backUpLogFileByDate = function (date) {
    return evernoteSync.backUpLogFileByDate(date);
};

exports.getDoingLog = function (date, logContent) {
    var logs, target;
    try {
        logs = helper.getLogs(logContent, date);
        target = _.find(logs, function (log) {
            var timeStr = helper.getTimeStr(log.origin);
            if (timeStr && timeStr.indexOf('~') >= 0) {
                var time = helper.getTimeSpan(log.origin, {date: date, patchEnd: false});
                return time.start && !time.end;
            } else {
                return false;
            }
        });
    } catch (err) {
        console.error(err.stack);
        return null;
    }
    return target;
};


exports.getDetailFromLogLineContent = function (date, lineContent) {
    var deferred = Q.defer();
    var includeNoTimeLog = true,
        result = {},
        log;
    try {
        log = helper.getLogs(lineContent, date, includeNoTimeLog)[0];
        if (log) {
            var versionName;
            var project = log.projects && log.projects[0];
            var logVersion = log.version;
            var logTask = log.task;
            if (project) {
                if (logVersion) {
                    versionName = logVersion.name;
                }
                searchProject.query({name: project.name, aggregate: false}).then(function (projects) {
                    var version;
                    var project = projects[0];
                    if (project) {
                        console.log('project', project);
                        result.project = project;
                        if (versionName) {
                            version = project.versions.filter(function (ver) {
                                return ver.name === versionName;
                            })[0];
                            console.log('version', version);
                            result.version = version;
                        }
                        if (logTask) {
                            searchTask.query({
                                name: logTask.name,
                                projectId: project.id,
                                versionId: version && version._id,
                                populate: false
                            }).then(function (tasks) {
                                console.log('task', tasks[0]);
                                result.task = tasks[0];
                                deferred.resolve(result);
                            });
                        } else {
                            return deferred.resolve(result);
                        }
                    } else {
                        return deferred.resolve(result);
                    }
                });
            }
        } else {
            deferred.resolve(result);
        }
    } catch (e) {
        console.error(e.stack);
        deferred.resolve(result);
    }
    return deferred.promise;
};

var server = require('tracker/server/main');
exports.startServer = function (options) {

    return server.start(options);
};

exports.stopServer = function () {
    return server.stop();
};


exports.isServerRunning = function () {
    return server.isRunning();
};


exports.notify = function (msg) {
    notifier.notify(msg);
};
