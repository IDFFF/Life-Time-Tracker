'use strict';
require('tracker/ltt');
var $ = require('jquery');
var isBrowser = false;
var Moment = require('moment');
var isBrowser = typeof process === 'undefined';
var evernoteSync = require('tracker/sync/evernote');
var importer = require('tracker/importer');
var searchProject = require('tracker/search/searchProject');
var searchVersion = require('tracker/search/searchVersion');
var searchTask = require('tracker/search/searchTask');
var util = require('tracker/util');
var helper = require('tracker/helper');
var _ = require('lodash');


function syncNote(config) {
    if (config.type === 'evernote') {
        return evernoteSync.sync({
            start: config.start,
            end: config.end
        });
    }
}

exports.syncEvernote = function (start, end) {
    var mStart, mEnd;
    if (start && end) {
        mStart = new Moment(start);
        mEnd = new Moment(end);
    } else {
        mStart = new Moment().startOf('month');
        mEnd = new Moment().endOf('month');
    }
    start = mStart.toDate();
    end = mEnd.toDate();
    return syncNote({
        type: 'evernote',
        start: start,
        end: end
    }).then(function () {
        return importer.importFromLogFile({
            start: start,
            end: end
        });
    });
};


exports.projects = function (options) {
    return searchProject.query(options);
};


exports.versions = function (options) {
    return searchVersion.query(options);
};


exports.tasks = function (options) {
    return searchTask.query(options);
};


exports.importLogContent = function (date, logContent) {
    return importer.importLogContent(date, logContent);
};


exports.readLogContent = function (date) {
    return util.readLogFileByDate(date).then(function (result) {
        return result.fileContent;
    });
};


exports.writeLogFile = function (date, logContent) {
    return util.writeLogFile(date, logContent);
};


exports.backUpLogFile = function (date, logContent) {
    return evernoteSync.backUpLogFile(date, logContent);
};

exports.getDoingLog = function (date, logContent) {
    var logs = helper.getLogs(logContent, date);
    var target = _.find(logs, function (log) {
        var timeStr = helper.getTimeStr(log.origin);
        if (timeStr && timeStr.indexOf('~') >= 0) {
            var time = helper.getTimeSpan(log.origin, {date: date, patchEnd: false});
            return time.start && !time.end;
        } else {
            return false;
        }
    });
    return target;
};