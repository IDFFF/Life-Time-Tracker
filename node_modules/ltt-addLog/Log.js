/**
 * @jsx React.DOM
 */

var React = require('react');
var $ = require('jquery');
var Ltt = global.Ltt;
var _ = require('lodash');

var Tag = React.createClass({
    render: function () {
        return (
            <span className="_c-log-tag">{this.props.children}</span>
        );
    }
});

var FiltableSelect = React.createClass({
    render: function () {
        var config = this.props.config;
        var value = config.value || 'value';
        var text = config.text || 'text';
        var defaultOption = {};
        defaultOption[value] = '';
        defaultOption[text] = 'select';
        options = [defaultOption].concat(this.props.options);
        var className = _.compact(["_c-filtableSelect", this.props.name]).join(' ');
        return (
            <select className={className} onChange={this.props.onChange}>
                {
                    options.map(function (opt) {
                        return (<option value={opt[value]}>{opt[text]}</option>);
                    })
                }
            </select>
        );
    }
});
var Log = React.createClass({

    getInitialState: function () {
        return {
            projects: [],
            versions: [],
            tasks: [],
            name: null,
            projectId: null,
            versionId: null,
            taskId: null
        };
    },

    render: function () {
        var projects = this.state.projects,
            versions = this.state.versions,
            tasks = this.state.tasks;
        return (
            <div className="_c-log">
                <input className="_c-log-name" placeholder="untitled task name"/>
                <FiltableSelect name="projects" options={projects} onChange={this.onProjectChange} config={{value: '_id', text: 'name'}}/>
                <FiltableSelect name="versions" options={versions} onChange={this.onVersionChange} config={{value: '_id', text: 'name'}}/>
                <FiltableSelect name="tasks" options={tasks} onChange={this.onTaskChange} config={{value: '_id', text: 'name'}}/>
            </div>
        );
    },

    componentDidMount: function () {
        var $el = $(this.getDOMNode());
        $el.find('._c-log-name').focus();
        var that = this;
        Ltt.sdk.projects().then(function (projects) {
            debugger;
            console.log(projects);
            that.setState({
                projects: projects
            });
        });
    },

    onProjectChange: function (e) {
        var projectId = e.target.value;
        var that = this;
        if (projectId) {
            this.setState({
                projectId: projectId
            });
            Ltt.sdk.versions({projectId: projectId}).then(function (versions) {
                that.setState({
                    versions: versions
                });
            });
        }
    },

    onVersionChange: function (e) {
        var versionId = e.target.value;
        var that = this;
        if (versionId) {
            this.setState({
                versionId: versionId
            });
            Ltt.sdk.tasks({projectId: this.state.projectId, versionId: versionId})
                .then(function (tasks) {
                    that.setState({
                        tasks: tasks
                    });
                });
        }
    }
});

module.exports = Log;